[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lógica Matemática",
    "section": "",
    "text": "Bienvenido al sitio de las prácticas de lógica matemática con PROLOG. En esta plataforma encontrarás todo el contenido de las sesiones con guías paso a paso del trabajo que debes realizar a lo largo de las mismas en cada sesión."
  },
  {
    "objectID": "index.html#prácticas-de-lógica-matemática",
    "href": "index.html#prácticas-de-lógica-matemática",
    "title": "Lógica Matemática",
    "section": "",
    "text": "Bienvenido al sitio de las prácticas de lógica matemática con PROLOG. En esta plataforma encontrarás todo el contenido de las sesiones con guías paso a paso del trabajo que debes realizar a lo largo de las mismas en cada sesión."
  },
  {
    "objectID": "index.html#sesiones",
    "href": "index.html#sesiones",
    "title": "Lógica Matemática",
    "section": "Sesiones",
    "text": "Sesiones\nLas prácticas se dividen en 5 sesiones:\n\nIntroducción a PROLOG y el entorno\nSintaxis de PROLOG\nEjercicios de PROLOG I\nEjercicios de PROLOG II\nCaso Práctico"
  },
  {
    "objectID": "units.html",
    "href": "units.html",
    "title": "Sesiones",
    "section": "",
    "text": "Estas son las sesiones de prácticas, entra en cada una para ver las explicaciones, ejercicios e instrucciones paso a paso.\nRecuerda que después de completar la sesión deberás de realizar el test disponible en canvas.\n\n\n\n\n\n\n\n\n  \n\n\n\n\nEjercicios PROLOG I\n\n\nPráctica con ejercicios básicos de PROLOG\n\n\n\n\nPROLOG\n\n\nVisualStudio\n\n\nBash\n\n\nLogica\n\n\n \n\n\n \n\n\n\n\n  \n\n\n\n\nIntroducción a PROLOG\n\n\nAprende lo indispensable para trabajar con PROLOG\n\n\n\n\nPROLOG\n\n\nVisualStudio\n\n\nSistemas Expertos\n\n\nBash\n\n\n \n\n\n \n\n\n\n\n  \n\n\n\n\nSintaxis de PROLOG: Hechos y Reglas\n\n\nAprende a formular con PROLOG\n\n\n\n\nPROLOG\n\n\nVisualStudio\n\n\nBash\n\n\nLogica\n\n\n \n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "sesiones/01-intro/index.html",
    "href": "sesiones/01-intro/index.html",
    "title": "Introducción a PROLOG",
    "section": "",
    "text": "Introducción al entorno de trabajo que usaremos en las prácticas, bases conceptuales de trabajo y uso de PROLOG."
  },
  {
    "objectID": "sesiones/01-intro/index.html#objetivos-de-la-sesión",
    "href": "sesiones/01-intro/index.html#objetivos-de-la-sesión",
    "title": "Introducción a PROLOG",
    "section": "Objetivos de la sesión",
    "text": "Objetivos de la sesión\n\nEntender el concepto de sistema experto y usos prácticos de este a nivel negocio.\nConocer el entorno de PROLOG, el software de uso y las principales instrucciones de trabajo con este lenguaje."
  },
  {
    "objectID": "sesiones/01-intro/index.html#qué-es-prolog",
    "href": "sesiones/01-intro/index.html#qué-es-prolog",
    "title": "Introducción a PROLOG",
    "section": "¿Qué es PROLOG?",
    "text": "¿Qué es PROLOG?\nPROLOG es un lenguaje de programación basado en el paradigma declarativo, en concreto, lógico. Este esta basado en la lógica de primer orden. Nos va a permitir…\n\nRepresentar la definición de relaciones mediante reglas.\nExpresar cuál es la solución a un problema.\n\nEs un lenguaje adecuado para poder representar problemas que requieran…\n\nRazonamiento: sistemas expertos, bases deductivas, etc.\nManipulación simbólica y representación explícita del conocimiento\nProcesamiento del lenguaje natural\n\nLas siglas de PROLOG vienen del fránces PROgramación en LOGique,"
  },
  {
    "objectID": "sesiones/01-intro/index.html#sistemas-basados-en-el-conocimiento",
    "href": "sesiones/01-intro/index.html#sistemas-basados-en-el-conocimiento",
    "title": "Introducción a PROLOG",
    "section": "Sistemas Basados en el Conocimiento",
    "text": "Sistemas Basados en el Conocimiento\nUna de sus aplicaciones es el desarrollo de Sistemas Basados en el Conocimiento, en inglés Knowledge Base System (KBS).\nUn KBS es un sistema de cómputo que engloba conocimiento organizado concerniente a algún área específica de la experiencia humana suficiente para actuar como una herramienta de consulta.\nPROLOG es un lenguaje útil para estos sistemas pues ofrece una sintaxis adecuada para poder expresar ese conocimiento mediante un conjunto de reglas y hechos. Por otro lado ofrece la sintaxis a través de la cual consultar al sistema que debe de ser capaz a partir de la base de conocimiento creada responder a las preguntas formuladas."
  },
  {
    "objectID": "sesiones/01-intro/index.html#cómo-vamos-a-trabajar",
    "href": "sesiones/01-intro/index.html#cómo-vamos-a-trabajar",
    "title": "Introducción a PROLOG",
    "section": "¿Cómo vamos a trabajar?",
    "text": "¿Cómo vamos a trabajar?\nPara las prácticas necesitamos instalar PROLOG en nuestros ordenadores, haremos uso de SWI-PROLOG. Este contiene todas las herramientas básicas para poder trabajar con este lenguaje.\nAdemás podemos hacer uso de editores de código más avanzados que nos permitirán trabajar mejor."
  },
  {
    "objectID": "sesiones/01-intro/index.html#swi-prolog",
    "href": "sesiones/01-intro/index.html#swi-prolog",
    "title": "Introducción a PROLOG",
    "section": "SWI PROLOG",
    "text": "SWI PROLOG\nPara estas prácticas nosotros contaremos con una distribución de PROLOG, llamada SWI PROLOG. Esta es de código abierto y nos permitirá poder trabajar e intrepretar código de PROLOG.\nSu web oficial es esta: SWI-PROLOG\n\n\n\n\n\n\nInstalación\n\n\n\nEste documento asume que estas trabajando en el entorno del laboratorio del curso, pero si necesitas instalar PROLOG y otros compnentes útiles para trabajar desde casa puedes ir a los @anexos de esta práctica."
  },
  {
    "objectID": "sesiones/01-intro/index.html#entorno-de-swi-prolog",
    "href": "sesiones/01-intro/index.html#entorno-de-swi-prolog",
    "title": "Introducción a PROLOG",
    "section": "Entorno de SWI PROLOG",
    "text": "Entorno de SWI PROLOG\nUna vez instalado encontrarás distintas cosas en tu ordenador:\n\n\nSWI-Prolog: El programa por defecto de PROLOG, este abre una terminal con el compilador y herramientas cargadas. A continuación veremos de forma básica como manejarse con este.\nSWI-Prolog (console): Esto es una consola similar a CMD de windows o la consola de MacOS. No vamos a utilizarla.\n\nAbre SWI-Prolog, tendrás ante ti una consola donde puede introducir los distintos comandos.\n\nEn la consola se muestra el símbolo ?- que es el indicador de PROLOG para pedir al usuario que introduzca una instrucción."
  },
  {
    "objectID": "sesiones/01-intro/index.html#comandos-en-prolog",
    "href": "sesiones/01-intro/index.html#comandos-en-prolog",
    "title": "Introducción a PROLOG",
    "section": "Comandos en PROLOG",
    "text": "Comandos en PROLOG\nComo norma general la estructura básica de los comandos para SWIPL es la siguiente\n&lt;nombre_comando&gt;.\nComo puedes observar después de cada comando u orden tendremos que escribir un punto, dando a entender al interprete que hemos terminado de escribir la orden. Esto es algo similar al ; que habrás visto en otros lenguajes de programación como JAVA, de esta mandera le explicamos a SWIPL que ahí termina nuestra instrucción.\nLo que tienes ante ti es una consola, las consolas nos permiten dar ordenes a nuestro ordenador y navegar a un bajo nivel entre los directorios y archivos, sin una interfaz visual como a la que estamos acostumbrados. En esta podemos dar instrucciones al ordenador y nos irá mostrando el output resultado de ejecutarlas, cada vez que termine de ejecutar nos volverá a mostrar el indicador para introducir una instrucción, en este caso ?-\nSi bien la consola habitual de tu ordenador la ejecutarías con otro programa distinto como el CMD o PowerShell de Windows, esta terminal emula este estilo pero teniendo ya cargado un interprete de PROLOG que permitirá que puedas cargar códigos de PROLOG y ejecutar instrucciones directamente.\nAhora aprenderemos los distintos comandos e instrucciones de navegación en una terminal de PROLOG, muchos de los comandos vienen originalmente de las terminales de Windows como PowerShell o Linux, y tienen las mismas funcionalidades.\n\nConocer mi directorio con pwd.\nEl primer comando que vamos a usar es pwd. Puedes escribirlo y presionar enter. Verás que PROLOG te devuelve una dirección, que es donde te encuentras ahora mismo y finalmente un true. Ahora mismo ese true no nos aporta nada más que indicarnos que la ejecución a terminado correctamente. Pero esta respuesta es una de las claves del lenguaje lógico con el que estamos trabajando y que explicaremos más adelante.\nTienes que tener en cuenta que si vien estas ejecutando una terminal de SWI PROLOG, estas trabajando en tu ordenador y al igual que harías con una terminal normal de tu ordenador, esta te permite navegar por tu ordenador.\nPor defecto cuando ejecutamos y abrimos PROLOG este lee desde nuestra carpeta raíz, la de nuestro usuario.\n\n\nConocer el contenido del directorio con ls.\nAhora que sabes donde estas, vamos a investigar que contiene el directorio donde nos encontramos. Para ello puedes ejecutar el comando ls.\nPor último puedes revisar el contenido del directorio donde te encuentras, simplemente con el comando ls.. Verás que la terminal te devuelve el listado de archivos o carpetas que hay.\n\nEste comando mostrará en la terminal todo el conjunto de directorios y ficheros que existen. Los directorios apareceran con una / al final del nombre, por ejemplo ejercicios/; mientras que los archivos apareceran con su extensión, por ejemplo hola.docx sería un word mientras que codigo.pl sería un archivo de código de PROLOG.\n\n\nNavegar entre directorios con cd().\nComo ves te encuentras en el directorio raíz de PROLOG, la carpeta por defecto creada por el sistema. Pero… ¿y si quiero cambiarme de sitio?.\nPara poder navegar y movernos entre carpetas de nuestro ordenador podemos usar el comando cd(&lt;dirección&gt;)., por ejemplo..\n\ncd('..') me llevará al directorio padre.\ncd('C:/Users/carviagu/Documents/pract_prolog') me llevará a la carpeta pract_prolog localizada en Documentos, pues es lo que le indico dentro de la función.\n\nTen cuidado con las direcciones, si te fijas verás que las barras / pueden estar en una orientación distinta a la de otros sistemas operativos, por ejemplo en Windows son al revés y deberás de cambiarlas cuando se lo escribas a PROLOG.\nIntenta llegar al escritorio desde el directorio raiz usado el comando cd()."
  },
  {
    "objectID": "sesiones/01-intro/index.html#primeros-pasos-con-prolog",
    "href": "sesiones/01-intro/index.html#primeros-pasos-con-prolog",
    "title": "Introducción a PROLOG",
    "section": "Primeros pasos con PROLOG",
    "text": "Primeros pasos con PROLOG\nPrueba a introducir las siguientes intrucciones ahora:\n\n7 @&gt; 6.\n5 is 5.\n4 @&lt; 3.\n9 is 2+3.\n\nFijate en el punto final que ponemos en cada una para indicar a PROLOG donde termina la instrucción. ¿Qué te devuelve en cada caso?\nSi te fijas PROLOG funciona como un chat al que podemos hacer preguntas simples (númericas en este caso). A lo largo de las prácticas veremos como crear algo más complejo y poder usarlo como fuente de conocimiento.\nSi bien el uso que le vamos a dar a PROLOG será relativo a Lógica, vamos a conocer algunos componentes básicos del lenguaje que podemos usar.\n\nTipos de elementos\nEn prolog podemos distinguir los siguientes tipos de elementos principales:\n\nConstantes o Átomos, hacen referencia a objetos, propiedades o relaciones. Se escriben con minuscula.\n\natom(luis).\natom(padre).\n\nNúmeros, enteros o reales, con o sin signo.\n\nnumber(2).\nnumber(-5).\nnumber(2e10).\n\nVariables, cadenas de letras, números o incluso el símbolo _, deben de empezar por mayúscula o con _ para que PROLOG las identifique como tal.\n\nvariable(X).\nvariable(Luis).\nvariable(_var).\n\nEstructuras, terminos compuestos por otros terminos: nombre_estructura(term1, term2, …, termN), a los terminos se les llaman argumentos y al nombre de la estructura predicado.\n\n\n\nUnificación\nLa unificación es el proceso mediante el cual PROLOG evalua las operaciones lógicas. Ya lo has visto funcionar antes, cuando le damos una instrucción evalua la comparación y devuelve true o false según corresponda. Viene definida por el operador =.\nAlgunos ejemplos:\nX = 3.\n6 = 6.\nX = X.\nX = 1 + 2.\nFijate en que ha pasado en la última instrucción, ¿que ha sido asignado a X?\n\nPROLOG no ha realizado la operación y ha asignado directamente la estructura 1 + 2 a la variable X.\n\nPara solucionar esto, si queremos que se evalue la operación aritmética podemos usar el unificador is que evalua primera las operaciones y después compara.\nX is 1 + 2.\nFijate como funciona distinto aquí…\n5 = 3 + 2.\n5 is 3 + 2.\nEn el primer caso es falso mientras que en el segundo es verdad. ¿Por qué?\n\nEn el primer caso comparamos un número con una estructura 3 + 2.\nEn el segundo comparamos un número con el número resultado de operar aritméticamente la operación 3 + 2\n\n\n\nOperadores comparativos\nPara comparar elementos tenemos diversos operadores, los más habituales igual y distinto. Pero tenemos que tener en cuenta que dependiendo de si queremos una evaluación aritmética antes el operador cambia…\n\nOperadores con evaluación aritmética\n\n\n\nOperador\nSignificado\n\n\n\n\nis\nunificación directa\n\n\n=:=\nigualdad\n\n\n=\\=\ndesigualdad\n\n\n&gt;/&lt;\nmayor / menor\n\n\n&gt;=/=&lt;\nmayor o igual / menor o igual\n\n\n\n\n\nOperadores sin evaluación aritmética\n\n\n\nOperador\nSignificado\n\n\n\n\n=\nunificación directa\n\n\n==\nigualdad\n\n\n\\==\ndesigualdad\n\n\n@&gt; / @&lt;\nmayor / menor\n\n\n@&gt;= / @=&lt;\nmayor o igual / menor o igual\n\n\n\n\n\n\n\n\n\nComparando sin evaluación\n\n\n\nEn este tipo de comparativas al no realizarse la evaluación es necesario que los terminos sean exactamente iguales. Mira el siguiente ejemplo…\nA = 5.\nB = 5.\nA == B.\nA == A.\n\n\n\n\n\nListas\nFinalmente podemos trabajar con listas. Estas se representan por []. Por ejemplo [a, 1, 2.0]. Puedes tener distintos tipos de elementos en las listas.\nPodemos virificar si dos listas son iguales con [1, 2, a] == [1,2,a].\nPodemos comprobar si una lista tiene un elemento con member(4.0, [c, 3, 4.0]).\nPodemos ver el tamaño de una lista con length([3,0.0,x], A). Fijate que tenemos que escribir la lista y la variable donde guardamos el resultado, en este caso A.\nPodemos unir dos listas con append([h,o], [l,a], B)., en este caso ponemos la primera lista, la segunda y el resultado se guarda en la variable B. Prueba a escribir estas versiones de la instrucción: append([h,o], B, [h,o,l,a]). o append(A, B, [h,o,l,a]). ¿Qué esta pasando? ¿Qué devuelve PROLOG y por qué?"
  },
  {
    "objectID": "sesiones/01-intro/index.html#finalizando-prolog",
    "href": "sesiones/01-intro/index.html#finalizando-prolog",
    "title": "Introducción a PROLOG",
    "section": "Finalizando PROLOG",
    "text": "Finalizando PROLOG\nFinalmente, puedes cerrar la terminal y salir del programa mediante el comando halt.\nEste comando te permitirá salir de la terminal de forma correcta."
  },
  {
    "objectID": "sesiones/01-intro/index.html#escribiendo-código-de-prolog",
    "href": "sesiones/01-intro/index.html#escribiendo-código-de-prolog",
    "title": "Introducción a PROLOG",
    "section": "Escribiendo código de PROLOG",
    "text": "Escribiendo código de PROLOG\nPara trabajar con PROLOG necesitaremos un editor de texto, como has podido ver desde la consola podemos darle pequeñas instrucciones, sin embargo para tareas más complejas donde se requiera un conjunto de hechos necesitaremos desarrollar programas más extensos.\nLos archivos de PROLOG poseen una extensión .pl al final. Puedes editarlos perfectamente con un bloc de notas, NotePad++ o similar."
  },
  {
    "objectID": "sesiones/01-intro/index.html#anexos",
    "href": "sesiones/01-intro/index.html#anexos",
    "title": "Introducción a PROLOG",
    "section": "Anexos",
    "text": "Anexos\n\nInstalando SWI PROLOG\nAunque en la laboratorio puedes encontrar SWI PROLOG instalado para trabajar, puedes y es recomendable instalarte la versión de SWI PROLOG en tu ordenador para trabajar desde casa y poder prácticar.\nAccede a la página oficial de SWI-PROLOG y en descarga la versión adecuada para tu ordenador según tu sistema operativo.\nDurante la instalación sigue las instrucciones, es muy recomendable permitir que instale el programa en el PATH (add swipl to the system PATH), de esta forma podremos usarlo desde cualquier terminal y facilitar las tareas.\nTambién existe una versión online, que si bien no es perfecta puede servirte para practicar y realizar ejercicios de forma complementaria. La puedes encontrar aquí.\n\n\nInstalando Visual Studio Code (opcional)\nUna propuesta para las prácticas será utilizar Visual Studio Code, este entorno es totalmente customizable permitiendo trabajar con múltiples lenguajes de programación e incorporando diversas extensiones que permiten adaptarlo a la tarea de programación que deseemos. Puedes descargarlo e instalarlo en tu ordenador aquí.\nUna vez instalado veremos que configuraciones adicionales necesitamos para poder trabajar con PROLOG. Una vez abierto ve a la tienda de extensiones, donde deberás de buscar PROLOG e instalarlo. Esto permitirá que Visual Studio pueda leer y ayudarte a escribir mejor código de PROLOG, también coloreará el código para mejor visualización.\n\nUna de las ventajas de Visual Studio es que podemos trabajar con SWI-PROLOG sin necesidad de abrir la terminal externa del programa. Visual Studio nos permite abrir terminales en el propio entorno y trabajar desde ahí. Para ello debes de ir Terminal &gt; New Terminal en las opciones superiores de Visual Studio Code. Se te abrirá una terminal en la parte inferior del entorno. Esta terminal no es la misma que la de PROLOG, sino la terminal del sistema (CMD, PowerShell, o el Shell)\nPara acceder a PROLOG, si todo ha sido instalando correctamente, basta con escribir swipl y dar a enter. Ahora se activará dentro de la terminal PROLOG y verás algo similar a la terminal externa. Ahora ya puedes trabajar con prolog.\n\nDe esta forma podrás a la vez que editar un programa de PROLOG ejecutarlo y ver sus resultados en la misma ventana."
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html",
    "title": "Introducción a PROLOG",
    "section": "",
    "text": "Introducción al entorno de trabajo que usaremos en las prácticas, bases conceptuales de trabajo y uso de PROLOG."
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html#objetivos-de-la-sesión",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html#objetivos-de-la-sesión",
    "title": "Introducción a PROLOG",
    "section": "Objetivos de la sesión",
    "text": "Objetivos de la sesión\n\nEntender el concepto de sistema experto y usos prácticos de este a nivel negocio.\nConocer el entorno de PROLOG, el software de uso y las principales instrucciones de trabajo con este lenguaje."
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html#qué-es-prolog",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html#qué-es-prolog",
    "title": "Introducción a PROLOG",
    "section": "¿Qué es PROLOG?",
    "text": "¿Qué es PROLOG?\nPROLOG es un lenguaje de programación basado en el paradigma declarativo, en concreto, lógico. Este esta basado en la lógica de primer orden. Nos va a permitir…\n\nRepresentar la definición de relaciones mediante reglas.\nExpresar cuál es la solución a un problema.\n\nEs un lenguaje adecuado para poder representar problemas que requieran…\n\nRazonamiento: sistemas expertos, bases deductivas, etc.\nManipulación simbólica y representación explícita del conocimiento\nProcesamiento del lenguaje natural\n\nLas siglas de PROLOG vienen del fránces PROgramación en LOGique,"
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html#sistemas-basados-en-el-conocimiento",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html#sistemas-basados-en-el-conocimiento",
    "title": "Introducción a PROLOG",
    "section": "Sistemas Basados en el Conocimiento",
    "text": "Sistemas Basados en el Conocimiento\nUna de sus aplicaciones es el desarrollo de Sistemas Basados en el Conocimiento, en inglés Knowledge Base System (KBS).\nUn KBS es un sistema de cómputo que engloba conocimiento organizado concerniente a algún área específica de la experiencia humana suficiente para actuar como una herramienta de consulta.\nPROLOG es un lenguaje útil para estos sistemas pues ofrece una sintaxis adecuada para poder expresar ese conocimiento mediante un conjunto de reglas y hechos. Por otro lado ofrece la sintaxis a través de la cual consultar al sistema que debe de ser capaz a partir de la base de conocimiento creada responder a las preguntas formuladas."
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html#cómo-vamos-a-trabajar",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html#cómo-vamos-a-trabajar",
    "title": "Introducción a PROLOG",
    "section": "¿Cómo vamos a trabajar?",
    "text": "¿Cómo vamos a trabajar?\nPara las prácticas necesitamos instalar PROLOG en nuestros ordenadores, haremos uso de SWI-PROLOG. Este contiene todas las herramientas básicas para poder trabajar con este lenguaje.\nAdemás podemos hacer uso de editores de código más avanzados que nos permitirán trabajar mejor."
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html#swi-prolog",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html#swi-prolog",
    "title": "Introducción a PROLOG",
    "section": "SWI PROLOG",
    "text": "SWI PROLOG\nPara estas prácticas nosotros contaremos con una distribución de PROLOG, llamada SWI PROLOG. Esta es de código abierto y nos permitirá poder trabajar e intrepretar código de PROLOG.\nSu web oficial es esta: SWI-PROLOG"
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html#entorno-de-swi-prolog",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html#entorno-de-swi-prolog",
    "title": "Introducción a PROLOG",
    "section": "Entorno de SWI PROLOG",
    "text": "Entorno de SWI PROLOG\nUna vez instalado encontrarás distintas cosas en tu ordenador:\n\n\nSWI-Prolog: El programa por defecto de PROLOG, este abre una terminal con el compilador y herramientas cargadas. A continuación veremos de forma básica como manejarse con este.\nSWI-Prolog (console): Esto es una consola similar a CMD de windows o la consola de MacOS. No vamos a utilizarla.\n\nAbre SWI-Prolog, tendrás ante ti una consola donde puede introducir los distintos comandos.\n\nEn la consola se muestra el símbolo ?- que es el indicador de PROLOG para pedir al usuario que introduzca una instrucción."
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html#comandos-en-prolog",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html#comandos-en-prolog",
    "title": "Introducción a PROLOG",
    "section": "Comandos en PROLOG",
    "text": "Comandos en PROLOG\nComo norma general la estructura básica de los comandos para SWIPL es la siguiente\n&lt;nombre_comando&gt;.\nComo puedes observar después de cada comando u orden tendremos que escribir un punto, dando a entender al interprete que hemos terminado de escribir la orden. Esto es algo similar al ; que habrás visto en otros lenguajes de programación como JAVA, de esta mandera le explicamos a SWIPL que ahí termina nuestra instrucción.\nLo que tienes ante ti es una consola, las consolas nos permiten dar ordenes a nuestro ordenador y navegar a un bajo nivel entre los directorios y archivos, sin una interfaz visual como a la que estamos acostumbrados. En esta podemos dar instrucciones al ordenador y nos irá mostrando el output resultado de ejecutarlas, cada vez que termine de ejecutar nos volverá a mostrar el indicador para introducir una instrucción, en este caso ?-\nSi bien la consola habitual de tu ordenador la ejecutarías con otro programa distinto como el CMD o PowerShell de Windows, esta terminal emula este estilo pero teniendo ya cargado un interprete de PROLOG que permitirá que puedas cargar códigos de PROLOG y ejecutar instrucciones directamente.\nAhora aprenderemos los distintos comandos e instrucciones de navegación en una terminal de PROLOG, muchos de los comandos vienen originalmente de las terminales de Windows como PowerShell o Linux, y tienen las mismas funcionalidades.\n\nConocer mi directorio con pwd.\nEl primer comando que vamos a usar es pwd. Puedes escribirlo y presionar enter. Verás que PROLOG te devuelve una dirección, que es donde te encuentras ahora mismo y finalmente un true. Ahora mismo ese true no nos aporta nada más que indicarnos que la ejecución a terminado correctamente. Pero esta respuesta es una de las claves del lenguaje lógico con el que estamos trabajando y que explicaremos más adelante.\nTienes que tener en cuenta que si vien estas ejecutando una terminal de SWI PROLOG, estas trabajando en tu ordenador y al igual que harías con una terminal normal de tu ordenador, esta te permite navegar por tu ordenador.\nPor defecto cuando ejecutamos y abrimos PROLOG este lee desde nuestra carpeta raíz, la de nuestro usuario.\n\n\nConocer el contenido del directorio con ls.\nAhora que sabes donde estas, vamos a investigar que contiene el directorio donde nos encontramos. Para ello puedes ejecutar el comando ls.\nPor último puedes revisar el contenido del directorio donde te encuentras, simplemente con el comando ls.. Verás que la terminal te devuelve el listado de archivos o carpetas que hay.\n\nEste comando mostrará en la terminal todo el conjunto de directorios y ficheros que existen. Los directorios apareceran con una / al final del nombre, por ejemplo ejercicios/; mientras que los archivos apareceran con su extensión, por ejemplo hola.docx sería un word mientras que codigo.pl sería un archivo de código de PROLOG.\n\n\nNavegar entre directorios con cd().\nComo ves te encuentras en el directorio raíz de PROLOG, la carpeta por defecto creada por el sistema. Pero… ¿y si quiero cambiarme de sitio?.\nPara poder navegar y movernos entre carpetas de nuestro ordenador podemos usar el comando cd(&lt;dirección&gt;)., por ejemplo..\n\ncd('..') me llevará al directorio padre.\ncd('C:/Users/carviagu/Documents/pract_prolog') me llevará a la carpeta pract_prolog localizada en Documentos, pues es lo que le indico dentro de la función.\n\nTen cuidado con las direcciones, si te fijas verás que las barras / pueden estar en una orientación distinta a la de otros sistemas operativos, por ejemplo en Windows son al revés y deberás de cambiarlas cuando se lo escribas a PROLOG.\nIntenta llegar al escritorio desde el directorio raiz usado el comando cd()."
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html#primeras-preguntas-a-prolog",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html#primeras-preguntas-a-prolog",
    "title": "Introducción a PROLOG",
    "section": "Primeras preguntas a PROLOG",
    "text": "Primeras preguntas a PROLOG\nPrueba a introducir las siguientes intrucciones ahora:\n\n7&gt;6.\n5 is 5.\n4&lt;3.\n9 is 2+3.\n\nFijate en el punto final que ponemos en cada una para indicar a PROLOG donde termina la instrucción. ¿Qué te devuelve en cada caso?\nSi te fijas PROLOG funciona como un chat al que podemos hacer preguntas simples (númericas en este caso). A lo largo de las prácticas veremos como crear algo más complejo y poder usarlo como fuente de conocimiento."
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html#finalizando-prolog",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html#finalizando-prolog",
    "title": "Introducción a PROLOG",
    "section": "Finalizando PROLOG",
    "text": "Finalizando PROLOG\nFinalmente, puedes cerrar la terminal y salir del programa mediante el comando halt.\nEste comando te permitirá salir de la terminal de forma correcta."
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html#escribiendo-código-de-prolog",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html#escribiendo-código-de-prolog",
    "title": "Introducción a PROLOG",
    "section": "Escribiendo código de PROLOG",
    "text": "Escribiendo código de PROLOG\nPara trabajar con PROLOG necesitaremos un editor de texto, como has podido ver desde la consola podemos darle pequeñas instrucciones, sin embargo para tareas más complejas donde se requiera un conjunto de hechos necesitaremos desarrollar programas más extensos.\nLos archivos de PROLOG poseen una extensión .pl al final. Puedes editarlos perfectamente con un bloc de notas, NotePad++ o similar."
  },
  {
    "objectID": "sesiones/01-intro/Sesion01_PROLOG.html#anexos",
    "href": "sesiones/01-intro/Sesion01_PROLOG.html#anexos",
    "title": "Introducción a PROLOG",
    "section": "Anexos",
    "text": "Anexos\n\nInstalando SWI PROLOG\nAunque en la laboratorio puedes encontrar SWI PROLOG instalado para trabajar, puedes y es recomendable instalarte la versión de SWI PROLOG en tu ordenador para trabajar desde casa y poder prácticar.\nAccede a la página oficial de SWI-PROLOG y en descarga la versión adecuada para tu ordenador según tu sistema operativo.\nDurante la instalación sigue las instrucciones, es muy recomendable permitir que instale el programa en el PATH (add swipl to the system PATH), de esta forma podremos usarlo desde cualquier terminal y facilitar las tareas.\nTambién existe una versión online, que si bien no es perfecta puede servirte para practicar y realizar ejercicios de forma complementaria. La puedes encontrar aquí.\n\n\nInstalando Visual Studio Code (opcional)\nUna propuesta para las prácticas será utilizar Visual Studio Code, este entorno es totalmente customizable permitiendo trabajar con múltiples lenguajes de programación e incorporando diversas extensiones que permiten adaptarlo a la tarea de programación que deseemos. Puedes descargarlo e instalarlo en tu ordenador aquí.\nUna vez instalado veremos que configuraciones adicionales necesitamos para poder trabajar con PROLOG. Una vez abierto ve a la tienda de extensiones, donde deberás de buscar PROLOG e instalarlo. Esto permitirá que Visual Studio pueda leer y ayudarte a escribir mejor código de PROLOG, también coloreará el código para mejor visualización.\n\nUna de las ventajas de Visual Studio es que podemos trabajar con SWI-PROLOG sin necesidad de abrir la terminal externa del programa. Visual Studio nos permite abrir terminales en el propio entorno y trabajar desde ahí. Para ello debes de ir Terminal &gt; New Terminal en las opciones superiores de Visual Studio Code. Se te abrirá una terminal en la parte inferior del entorno. Esta terminal no es la misma que la de PROLOG, sino la terminal del sistema (CMD, PowerShell, o el Shell)\nPara acceder a PROLOG, si todo ha sido instalando correctamente, basta con escribir swipl y dar a enter. Ahora se activará dentro de la terminal PROLOG y verás algo similar a la terminal externa. Ahora ya puedes trabajar con prolog.\n\nDe esta forma podrás a la vez que editar un programa de PROLOG ejecutarlo y ver sus resultados en la misma ventana."
  },
  {
    "objectID": "sesiones/02-sintaxis/index.html",
    "href": "sesiones/02-sintaxis/index.html",
    "title": "Sintaxis de PROLOG: Hechos y Reglas",
    "section": "",
    "text": "Formulación de Hechos y Reglas para desarrollar bases de conocimiento en PROLOG"
  },
  {
    "objectID": "sesiones/02-sintaxis/index.html#objetivos-de-la-sesión",
    "href": "sesiones/02-sintaxis/index.html#objetivos-de-la-sesión",
    "title": "Sintaxis de PROLOG: Hechos y Reglas",
    "section": "Objetivos de la sesión",
    "text": "Objetivos de la sesión\n\nEntender la sintaxis de PROLOG para formular Hechos y Reglas.\nSaber traducir un Hecho o Premisa en lenguaje de PROLOG.\nSaber traducir una Regla de razonamiento en lenguaje de PROLOG.\nSaber como preguntar a PROLOG en base a su razonamiento cargado."
  },
  {
    "objectID": "sesiones/02-sintaxis/index.html#razonando-con-prolog",
    "href": "sesiones/02-sintaxis/index.html#razonando-con-prolog",
    "title": "Sintaxis de PROLOG: Hechos y Reglas",
    "section": "Razonando con PROLOG",
    "text": "Razonando con PROLOG\nComo hemos visto en la práctica anterior PROLOG funciona validando razonamientos.\nEn al sesión anterior fuimos capaces de probar comparativas aritméticas y de estructuras, pero todo limitado a los números. En esta sesión ya vamos a probar el verdadero potencial de PROLOG desarrollando argumentaciones más complejas.\nPiensa por un momento en que necesitemos preguntar a PROLOG algo en específico…\nPrueba este código en la terminal…\n¿ama monica a chandler?.\nParece que PROLOG no entiende que le estamos preguntando, vamos a probar usando ahora la sintaxis de PROLOG. Para ello usaremos una estructura, donde el predicado será ama y los términos serán las personas que queremos comprobar si se aman: monica y chandler. Prueba ahora…\nama(monica, chandler).\nParece que PROLOG sigue sin entendernos… Esto es porque PROLOG no sabe lo que significa ama, ni como debe de interpretarlo. Si recuerdas, la progamación lógica requiere que previamente hallamos explicado a PROLOG como como se definen los conceptos y como tiene que responder."
  },
  {
    "objectID": "sesiones/02-sintaxis/index.html#bases-de-conocimiento",
    "href": "sesiones/02-sintaxis/index.html#bases-de-conocimiento",
    "title": "Sintaxis de PROLOG: Hechos y Reglas",
    "section": "Bases de Conocimiento",
    "text": "Bases de Conocimiento\nPara poder dotar a PROLOG de este conocimiento necesitamos crear una base de conocimiento y razonamiento, lo que denominaremos un programa en PROLOG. Las bases de conocimiento se componen de dos partes muy relevantes:\n\nLos Hechos (Facts): son las ideas principales sobre las que basar el conocimiento, los pilares a partir de los cuales podemos comenzar nuestro razonamiento. Nuestra base de conocimiento.\nLas Reglas (Rules): son las reglas de inferencia sobre las cuales a partir de la base de conocimiento podemos relacionar, argumentar y responder a las preguntas.\n\nEs esencial que la base de conocimiento de nuestro programa sea acorde con el objetivo que queremos conseguir."
  },
  {
    "objectID": "sesiones/02-sintaxis/index.html#desarrollo-de-bases-de-conocimiento",
    "href": "sesiones/02-sintaxis/index.html#desarrollo-de-bases-de-conocimiento",
    "title": "Sintaxis de PROLOG: Hechos y Reglas",
    "section": "Desarrollo de Bases de Conocimiento",
    "text": "Desarrollo de Bases de Conocimiento\nA partir del primer problema vamos a desarrollar la base de conocimiento que necesitamos para poder llevarlo a cabo. Para después probarla y cargarla en PROLOG.\n\nCreando mi primera base de conocimiento\nLas bases de conocimiento o programas de PROLOG se definen escribiendo el código en un fichero de PROLOG, los ficheros de PROLOG tienen la extensión .pl (Esto es algo similar a otros lenguajes de programación como Java donde los ficheros tienen la extensión .java)\nFuera de la terminal de PROLOG, ve a tu escritorio y crea una carpeta llamada pract_prolog, en esa carpeta crea un nuevo archivo llamado friends.pl (Puedes crear un archivo de texto y renombrarlo cambiando la extensión).\n\n\n\n\n\n\nTrabajando con extensiones\n\n\n\nSi nunca has manejado las extensiones de los archivos, son las siglas que acompañan al nombre de los archivos indicando que tipo de archivo es. Por ejemplo un documento word suele ir acompañado por la extensión .docx: documento01.docx\nMostrar las extensiones. Es posible que no veas las extensiones de los archivos en tu ordenador, en Windows suelen estar ocultas por defecto. Para mostrarlas ve al explorador de archivos y en la pestaña Vista tendrás la opción de activarlas marcando la casilla de Mostrar Extensiones."
  },
  {
    "objectID": "sesiones/02-sintaxis/index.html#desarrollo-de-bases-de-conocimiento-friends",
    "href": "sesiones/02-sintaxis/index.html#desarrollo-de-bases-de-conocimiento-friends",
    "title": "Sintaxis de PROLOG: Hechos y Reglas",
    "section": "Desarrollo de Bases de Conocimiento: Friends",
    "text": "Desarrollo de Bases de Conocimiento: Friends\nA partir del primer problema vamos a desarrollar la base de conocimiento que necesitamos para poder llevarlo a cabo. Para después probarla y cargarla en PROLOG.\n\nCreando mi primera base de conocimiento\nLas bases de conocimiento o programas de PROLOG se definen escribiendo el código en un fichero de PROLOG, los ficheros de PROLOG tienen la extensión .pl (Esto es algo similar a otros lenguajes de programación como Java donde los ficheros tienen la extensión .java)\nFuera de la terminal de PROLOG, ve a tu escritorio y crea una carpeta llamada pract_prolog, en esa carpeta crea un nuevo archivo llamado friends.pl (Puedes crear un archivo de texto y renombrarlo cambiando la extensión).\n\n\n\n\n\n\nTrabajando con extensiones\n\n\n\nSi nunca has manejado las extensiones de los archivos, son las siglas que acompañan al nombre de los archivos indicando que tipo de archivo es. Por ejemplo un documento word suele ir acompañado por la extensión .docx: documento01.docx\nMostrar las extensiones. Es posible que no veas las extensiones de los archivos en tu ordenador, en Windows suelen estar ocultas por defecto. Para mostrarlas ve al explorador de archivos y en la pestaña Vista tendrás la opción de activarlas marcando la casilla de Mostrar Extensiones.\n\n\nUna vez creado ya puedes abrir el fichero para editarlo, como vamos a editar código lo ideal sería utilizar un editor de código. En la prácticas puedes usar el que consideres más opoturno, pero si no sabes cual usar puedes abrir el archivo con Visual Studio Code.\nPasa el ratón por encima dale a click derecho y seleccionar Abrir con, busca entre los programas disponibles Visual Studio Code, verás que tiene un icono azul.\n\n\n\n\n\n\nTrabajando con Visual Studio Code\n\n\n\nVisual Studio Code es un editor de código totalmente gratuito de miscrosoft (a diferencia de Visual Studio Community que es un entorno más avanzado pero que requiere de licencia).\nCon este editor podrás programar en cualquier lenguaje de programación. En nuestro caso vamos a usar Prolog, revisa siempre que Visual ha seleccionado el lenguaje correcto en la barra inferior.\nCuando abres un archivo de código, Visual Studio identifica el lenguaje de programación mediante la extensión. En el caso de un .pl existen varios lenguajes de programación con que usan esta extensión. Verifica que Visual Studio está identificando correctamente la extensión en el lado derecho de la barra inferior de Visual. Deberá de poner Prolog, si pone otro lenguaje como PERL deberás de cambiarlo seleccionando el correcto.\n\nPara cambiar el lenguaje selecciona el nombre del lenguaje que aparece, un listado aparecerá donde puedes buscar el lenguaje que desees usar.\nTambién puedes usar la extensión de Prolog disponible para adquirir en la workshop de Visual Studio Code.\nVe al anexo para más información de uso de Visual Studio Code con PROLOG.\n\n\n\nFacts\nPrimero necesitamos definir los hechos, estos serán la base esencial del conocimiento que tiene PROLOG, las verdades universales que usará para fundamentar sus respuestas.\nLos hechos son estructuras que vienen expresadas como…\nnombre_predicado(nombre_1, ..., nombre_n).\nDonde asignaremos un nombre del predicado y luego nombres de los individuos o varaibles que intervienen en esa verdad.\nPara nuestro ejemplo el primer hecho que establecimos fue que Mónica ama a Chandler, esto se expresa como\nama(monica, chandler).\nAhora a ese hecho incorporar dos nuevos hechos…\n\nChandler ama a Mónica\nJoey ama a Rachel\n\n\n\nRules\nUna vez tenemos nuestros hechos necesitamos dar a PROLOG unas reglas básicas para razonamiento.\nLas primera de las reglas que vamos a establecer es “Dos personas salen si se aman mutuamente”.\nPodemos representar esta regla en lenguaje de primer orden como como… \\(\\forall x \\forall y (ama(x,y) \\land ama(y,x) \\to sale(x,y))\\)\nNos referimos a todos los inviduos por lo que usamos dos cuantificadores universales, y dos predicados:\n\nel primero que ya hemos creado en el bloque de hechos ama(x,y). X ama a Y.\nel segundo que es que estamos definiendo sale(x,y) que es la consecuencia de que dos personas se amen.\n\nPara poder codificarlo en PROLOG podemos hacerlo de la siguiente forma:\nsale(X,Y):- ama(X,Y), ama(Y,X).\nFijaos que no necesitamos expresar cuantificadores, y que además hemos invertido la formula de primer orden.\nEstamos expresando que sale(x,y) es el resultado de que dos personas se amen. A la hora de representarlo:\n\nel condicional \\(\\to\\) se expresa con :-\nla conjunción \\(\\land\\) se expresa con ,\nla disyunción \\(\\lor\\) se expresaría con ;\n\nPor otro lado en este caso hacemos uso de variables (X, Y) y no de estructuras como en los hechos. Esto es ya que ahora estamos definiendo reglas, PROLOG entiende que esas variables tendran un valor que definirá el usuario y el lo aplicará a la regla usando los hechos.\nAhora prueba definir una nueva regla: “Dos personas son amigos si almenos uno de ellos ama a el otro.”\n\n\nEl programa friends.pl\nCuando termines deberas de tener ya un programa completo de PROLOG definido en tu archivo friends.pl. El programa debería de quedar como sigue:\n% Friends program\n\n% Facts\nama(monica, chandler).\nama(chandler, monica).\nama(joey, rachel).\n\n% Rules\nsale(X,Y):- ama(X,Y), ama(Y,X).\namigos(X,Y):- ama(X,Y); ama(Y,X).\nPara la parte de hechos, hemos añadido que tanto Mónica como Chandler se aman mutuamente y que además Joey ama a Rachel. Después de cada hecho hay que añadir el . final de los comandos de PROLOG.\nY en las reglas hemos definido la segunda regla como \\(\\forall x \\forall y (ama(x,y) \\lor ama(y,x) \\to amigos(x,y))\\) en lenguaje PROLOG.\nEs muy importante seguir el orden: primero los Hechos y segundo las Reglas. Esto pues las reglas se fundamentan en los hechos, pero además podemos enunciar reglas basadas en otras reglas, en este segundo caso deben de seguir el orden de dependencia.\nIMPORTANTE! Guarda el archivo antes de cerrarlo.\n\n\n\nCargando el programa en PROLOG\nUna vez tienes tu programa de PROLOG terminado debemos de cargarlo en la base de conocimiento de PROLOG para que podamos hacerle preguntas al respecto.\nPara esta parte es recomendable que, desde la consola, cambies de directorio a la carpeta que has creado en el apartado anterior donde está el archivo friends.pl. Recuerda que puedes usar el comando cd(). para moverte en la terminal.\nUna vez estes en la carpeta donde se encuentra tu programa basta con ejecutar el comando ['nombre_archivo.pl'].En nuestro caso\n?- ['friends.pl'].\nUna vez hecho esto PROLOG cargará en su memoria todos los hechos y reglas enunciados. Si más adelante cambiamos algo del código, bastará con volverlo a cargar.\n\n\nPreguntando a PROLOG\nAhora que ya tienes cargada la base de conocimiento friends, puedes preguntar a PROLOG.\nPrueba la siguientes preguntas:\n\n¿Ama Mónica a Chandler?\n¿Ama Phoebe a Chandler?\n¿Sale Mónica con Chandler?\n¿Sale Chandler con Mónica?\n¿Sale Rachel con Joey?\n¿Son Mónica y Chandler amigos?\n¿Son Gunter y Chandler amigos?\n\n¿Qué te devuelve en cada caso? Recuerda que debes de usar la sintaxis que has diseñado para Prolog. Por ejemplo, la primera pregunta sería ama(monica,chandler).\nPor otro lado puedes hacer preguntas más genéricas y PROLOG intentará deducir la respuesta a partir de las reglas y la base de conocimiento. Por ejemplo, ¿a quién ama Mónica?\nBasta con escribir ama(monica,X)., de esta forma PROLOG nos dirá que valor puede tomar X.\nIntenta responder a las siguientes preguntas:\n\n¿Con quién sale Chandler?\n¿Con quién sale Rachel?\n¿De quién es amigo Joey?\n\nAhora prueba a escribir salen(X,Y). o salen(X,X).. ¿Qué pasa?"
  },
  {
    "objectID": "sesiones/02-sintaxis/index.html#anexos",
    "href": "sesiones/02-sintaxis/index.html#anexos",
    "title": "Sintaxis de PROLOG: Hechos y Reglas",
    "section": "Anexos",
    "text": "Anexos\n\nTrabajando con Visual Studio Code\nUna propuesta para las prácticas será utilizar Visual Studio Code, este entorno es totalmente customizable permitiendo trabajar con múltiples lenguajes de programación e incorporando diversas extensiones que permiten adaptarlo a la tarea de programación que deseemos.\nUna vez abierto ve a la tienda de extensiones, donde deberás de buscar PROLOG e instalarlo. Esto permitirá que Visual Studio pueda leer y ayudarte a escribir mejor código de PROLOG, también coloreará el código para mejor visualización.\n\nUna de las ventajas de Visual Studio es que podemos trabajar con SWI-PROLOG sin necesidad de abrir la terminal externa del programa. Visual Studio nos permite abrir terminales en el propio entorno y trabajar desde ahí. Para ello debes de ir Terminal &gt; New Terminal en las opciones superiores de Visual Studio Code. Se te abrirá una terminal en la parte inferior del entorno. Esta terminal no es la misma que la de PROLOG, sino la terminal del sistema (CMD, PowerShell, o el Shell)\nPara acceder a PROLOG, si todo ha sido instalando correctamente, basta con escribir swipl y dar a enter. Ahora se activará dentro de la terminal PROLOG y verás algo similar a la terminal externa. Ahora ya puedes trabajar con prolog.\n\nDe esta forma podrás a la vez que editar un programa de PROLOG ejecutarlo y ver sus resultados en la misma ventana."
  },
  {
    "objectID": "sesiones/02-sintaxis/index.html#trazas-y-depuración-en-prolog",
    "href": "sesiones/02-sintaxis/index.html#trazas-y-depuración-en-prolog",
    "title": "Sintaxis de PROLOG: Hechos y Reglas",
    "section": "Trazas y depuración en PROLOG",
    "text": "Trazas y depuración en PROLOG\nComo puedes observar Prolog te devuelve directamente la respuesta a tu pregunta. Pero muchas veces podemos necesitar entender como está razonando Prolog.\nProlog ya está creado para razonar usando la lógica, nosotros solo establecemos las reglas que deben de seguirse y las premisas de conocimiento. Para saber si el razonamiento creado es correcto podemos querer estudiar paso a paso que argumentos sigue Prolog en la generación de su respuesta.\nPara ello podemos activar la depuración (debugging), esta nos mostrará los pasos que se han seguido para dar repuesta.\nEscribe el siguiente comando en la terminal:\n?- trace.\nAhora se habrá activado la función de depuración y Prolog devolverá la traza seguida para determinar la respuesta. Una vez ejecutada la pregunta, sigue presionando enter cada vez para que Prolog devuelva una a uno a uno los pasos. Prueba las preguntas anteriores y analiza que traza devuelve.\nPara salir del modo depuración escibre el comando notrace. y luego nodebug., volverá la terminal al funcionamiento original."
  },
  {
    "objectID": "sesiones/02-sintaxis/index.html#ejercicio-práctico---la-familia",
    "href": "sesiones/02-sintaxis/index.html#ejercicio-práctico---la-familia",
    "title": "Sintaxis de PROLOG: Hechos y Reglas",
    "section": "Ejercicio Práctico - La Familia:",
    "text": "Ejercicio Práctico - La Familia:\nCrea un programa de PROLOG que sea capaz de responder a preguntas sobre el menú de un restaurante:\n\nUn plato es un segundo si es carne o pescado.\nUna combinación de 3 platos es un menú, si está formada por un primero, un segundo y un postre.\n\nLos hechos que conforman este programa son:\n\nLa ensalada y la sopa son primeros.\nEl pollo es un plato de carne.\nEl rape y la lubina es un plato de rape.\nLas natillas y el flan son postres.\n\nCrea el fichero restaurante.pl y escribe tu programa de PROLOG, después puedes probarlo preguntando:\n\n¿El rape es un primer plato?\n¿Existe el menu compuesto por ensalada, sopa y natillas?"
  },
  {
    "objectID": "sesiones/02-sintaxis/index.html#ejercicio-práctico",
    "href": "sesiones/02-sintaxis/index.html#ejercicio-práctico",
    "title": "Sintaxis de PROLOG: Hechos y Reglas",
    "section": "Ejercicio Práctico",
    "text": "Ejercicio Práctico\nCrea un programa de PROLOG que sea capaz de responder a preguntas sobre el menú de un restaurante:\n\nUn plato es un segundo si es carne o pescado.\nUna combinación de 3 platos es un menú, si está formada por un primero, un segundo y un postre.\n\nLos hechos que conforman este programa son:\n\nLa ensalada y la sopa son primeros.\nEl pollo es un plato de carne.\nEl rape y la lubina es un plato de rape.\nLas natillas y el flan son postres.\n\nCrea el fichero restaurante.pl y escribe tu programa de PROLOG, después puedes probarlo preguntando:\n\n¿El rape es un primer plato?\n¿Existe el menu compuesto por ensalada, sopa y natillas?"
  },
  {
    "objectID": "sesiones/03-exercises_I/index.html",
    "href": "sesiones/03-exercises_I/index.html",
    "title": "Ejercicios PROLOG I",
    "section": "",
    "text": "Práctica lo aprendido en las dos sesiones de formación resolviendo los siguientes ejercicios de PROLOG"
  },
  {
    "objectID": "sesiones/03-exercises_I/index.html#objetivos-de-la-sesión",
    "href": "sesiones/03-exercises_I/index.html#objetivos-de-la-sesión",
    "title": "Ejercicios PROLOG I",
    "section": "Objetivos de la sesión",
    "text": "Objetivos de la sesión\n\nSaber formular y escribir código de PROLOG.\nDesarrollar la capacidad de resolución de problemas de PROLOG.\nComprender los distintos caso de uso que podemos encontrar en este paradigma."
  },
  {
    "objectID": "sesiones/03-exercises_I/index.html#introducción",
    "href": "sesiones/03-exercises_I/index.html#introducción",
    "title": "Ejercicios PROLOG I",
    "section": "Introducción",
    "text": "Introducción\nEn esta sesión se te presentan diferentes ejercicios donde deberás usar los conocimientos de adquiridos en las sesiones anteriores para poder reslverlos.\nLos ejercicios presentan distintos casos y problemas que se pueden presentar para que puedas conocerlos y aprender a desarrollar soluciones a los mismos.\nAl final de la sesión deberás de realizar el test de canvas correspondiente donde tendrás preguntas relacionadas con estos ejercicios."
  },
  {
    "objectID": "sesiones/03-exercises_I/index.html#ejercicio-02",
    "href": "sesiones/03-exercises_I/index.html#ejercicio-02",
    "title": "Ejercicios PROLOG I",
    "section": "Ejercicio 02",
    "text": "Ejercicio 02\nDado el siguiente programa:\nojos(ana,azul).\nojos(paco,azul).\n\npadre(valeria,paco).\nmadre(valeria,ana).\ncabello(ana,rojo).\ncabello(paco,negro).\n\nojos(X,Color) :- madre(X,M), padre(X,P), ojos(M,Color), ojos(P,Color).\ncabello(X,rojo) :- madre(X,M), cabello(M,rojo).\n¿Cómo podemos saber que persona o personas tienen los ojos de color azul y el cabello rojo?"
  },
  {
    "objectID": "sesiones/03-exercises_I/index.html#ejercicio-03",
    "href": "sesiones/03-exercises_I/index.html#ejercicio-03",
    "title": "Ejercicios PROLOG I",
    "section": "Ejercicio 03",
    "text": "Ejercicio 03\nDado el siguiente programa:\nprimero(ensalada).\nprimero(sopa).\ncarne(pollo).\npescado(rape).\npescado(lubina).\npostre(natillas).\npostre(flan).\n\ncomida(X,Y,Z) :- primero(X), segundo(Y),postre(Z).\nsegundo(X):-carne(X).\nsegundo(Y):-pescado(Y).\n¿Cómo podemos obtener solo aquellas comidas en las que el segundo plato es la lubina?"
  },
  {
    "objectID": "sesiones/03-exercises_I/index.html#ejercicio-04",
    "href": "sesiones/03-exercises_I/index.html#ejercicio-04",
    "title": "Ejercicios PROLOG I",
    "section": "Ejercicio 04",
    "text": "Ejercicio 04\nDado el siguiente programa:\nvampiro(lestat).\nvampiro(dracula).\nmuerde(lestat,louis).\nmuerde(lestat,ana).\nmuerde(scooby-doo,shaggy-rogers).\nEscribe una regla que represente la siguiente información:\n\nUna persona se convierte en vampiro si es mordida por un vampiro"
  },
  {
    "objectID": "sesiones/03-exercises_I/index.html#ejercicio-05",
    "href": "sesiones/03-exercises_I/index.html#ejercicio-05",
    "title": "Ejercicios PROLOG I",
    "section": "Ejercicio 05",
    "text": "Ejercicio 05\nDada la siguiente base de conocimiento:\npadece(pedro,gripe).\npadece(pedro,hepatitis).\npadece(juan,hepatitis).\npadece(maria,intoxicacion).\n\nsintoma(fiebre,gripe).\nsintoma(cansancio,hepatitis).\nsintoma(vomito,intoxicacion).\nsintoma(cansancio,gripe).\n\nsuprime(aspirina,fiebre).\nsuprime(motilium,vomito).\nAñade las siguientes reglas:\n\nSi una enfermedad tiene un síntoma y un medicamento suprime ese sintoma, entonces el medicamento alivia esa enfermedad.\nSi alguien padece una enfermedad y un medicamento alivia esa enfermedad entonces esa persona debe de tomar el medicamento.\n\nDespués indica como podrías saber que sintomas presenta pedro."
  },
  {
    "objectID": "sesiones/03-exercises_I/index.html#ejercicio-06",
    "href": "sesiones/03-exercises_I/index.html#ejercicio-06",
    "title": "Ejercicios PROLOG I",
    "section": "Ejercicio 06",
    "text": "Ejercicio 06\nCrea un programa que represente los siguientes reglas:\n\nDada una persona y un animal, si esa persona es el amo del animal entonces el animal es una mascota.\n\nUn gato o un perro son animales.\n\nEsta será tu base de conocimiento (hechos):\n\nmiau es un gato\nEnrique es amo de miau.\nEnrique es amo de guau.\nJuan es una persona.\nEnrique es una persona.\n\nUna vez generado haz varias pruebas para verificar que el programa es correcto.\n\n¿De quien es dueño miau?\n¿Qué personas hay en la base de conocimiento?\n¿Qué tendrías que añadir para que mascota(X) devuelva X=miau y X=guau?"
  },
  {
    "objectID": "sesiones/03-exercises_I/index.html#ejercicio-08",
    "href": "sesiones/03-exercises_I/index.html#ejercicio-08",
    "title": "Ejercicios PROLOG I",
    "section": "Ejercicio 08",
    "text": "Ejercicio 08\nTenemos las personas de una fiesta, definidas por el predicado hombre() y mujer()\nhombre(alfredo).\nhombre(felipe).\nhombre(francisco).\nmujer(sonia).\nmujer(eva).\nmujer(carmen).\nTenemos las bebidas que toma cada invitado mediante el predicado bebe()\nbebe(alfredo, whisky).\nbebe(alfredo, ron_cola).\nbebe(felipe, cerveza).\nbebe(felipe, gin_tonic).\nbebe(felipe,ron_cola).\nbebe(francisco, vino).\nbebe(francisco, malibu).\nbebe(sonia, gin_tonic).\nbebe(sonia, malibu).\nbebe(eva, vino).\nbebe(eva, cerveza).\nbebe(carmen, whisky).\nbebe(carmen, ron_cola).\nParte A\nDefine el predicado pareja(X,Y) que exprese que dos personas son pareja cuando X es un hombre e Y un mujer y tengan al menos una bebida favorita en común. También define el predicado pareja2(X,Y) que se satisface cuando X e Y tienen al menos dos bebidas favoritas en común.\nParte B\nAñade ahora dos nuevas premisas…\n\nPepe bebe cualquier cosa que beba Alfredo.\nElena bebe cualquier cosa que beban Sonia o Felipe."
  },
  {
    "objectID": "sesiones/03-exercises_I/index.html#ejercicio-01",
    "href": "sesiones/03-exercises_I/index.html#ejercicio-01",
    "title": "Ejercicios PROLOG I",
    "section": "Ejercicio 01",
    "text": "Ejercicio 01\nDado el siguiente programa:\nlegusta(pepe,pesca).\nlegusta(maria,bailar).\nlegusta(ana,pesca).\nlegusta(pepe,musica).\nlegusta(maria,musica).\nlegusta(ana,bailar).\n¿Cómo puedo saber que le gusta a Ana? ¿Y a quién le gusta la música?"
  },
  {
    "objectID": "sesiones/03-exercises_I/index.html#ejercicio-07",
    "href": "sesiones/03-exercises_I/index.html#ejercicio-07",
    "title": "Ejercicios PROLOG I",
    "section": "Ejercicio 07",
    "text": "Ejercicio 07\nCrea un programa que represente la siguiente argumentación:\n\nSi X está arriba de Y y se tocan, entonces X está encima de Y .\nLa taza está arriba del libro.\nLa taza toca al libro."
  }
]